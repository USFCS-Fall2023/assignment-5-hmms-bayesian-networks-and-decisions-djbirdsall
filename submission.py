import HMM

if __name__ == "__main__":
    print("Question 2 answers:\n")
    print("My implementation of load with two_english: ")
    model = HMM.HMM()
    model.load('two_english')
    print("Transition Keys:")
    print(model.transitions.keys())
    print("Emission Keys:")
    print(model.emissions.keys())
    model.load('partofspeech.browntags.trained')
    print("\nMy implementation of generate(10) with partofspeech.browntags.trained loaded:")
    genexample = model.generate(10)
    print(genexample)
    print("\nMy implementation of forward:")
    print("I modified the function a bit to be able to accept both filenames and/or observations.")
    print("\nThis is an example with the generated observation.\nIt returns a list of one item - the most likely final state:")
    print(model.forward(observation=genexample))
    print("\nThis is an example using ambiguous_sents.obs.\nIt returns a list of the most likely final states of each observation in the file, in order:")
    print(model.forward(filename='ambiguous_sents.obs'))
    print("\nThis is my implementation of viterbi:\nI also made it able to accept either a single observation, or a file.")
    print("\nThis is an example with the generated observation.\nIt returns a single item dictionary where the key is 1 and the value is a list of the most likely sequence of states:")
    print(model.viterbi(observation=genexample))
    print("\nThis is an example using ambiguous_sents.obs.\nIt returns a list of dictionaries with the keys being the number associated with the observation in the file\nand the values being a list of the most likely sequence of states:")
    print(model.viterbi(filename='ambiguous_sents.obs'))
    print("\n\nQuestion 3 answers:\n")